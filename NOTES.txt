11/23-24/2015
TODO:
-figure out what's causing drawing in weird space. ask Kai? [done, vec4 vs vec3]
-move mesh into its own class. load an obj instead of doing your jank thing
	-needs to hold its own pointers to buffers and stuff
	-can we put the GL calls in there? or would it make more sense for this to be a struct?
-figure out how to draw polys (read about geometry shaders)
-read up on compute shader memory
-add a plane and some basic shading

-okay. the lack of atomics for floats is a problem. options:
	-look into manually locking
	-look into adding an int buffer to do something
	-float packing (bad idea?)
	-pack the constraints so there's no interference. -> this is Kai sanctioned
		-there's at most 8 constraints influencing each point, we need 8 buffers this way
		-in theory if the mesh is big enough we don't even have to worry about GPU saturation problems
		-and locks/atomics basically serialize too, right?

11/23/2015
BASIC INTEGRATOR NOTES
-we'll do a basic euler for now
-steps:
	-compute forces
	-compute external forces
	-resolve constraints
	-damp velocity
	-render
-we'll also try ping-ponging
-but how to compute forces? -> I... guess we didn't have to do this -> actually, we did
-so go read the 563 HW writeup

IMPLEMENTATION NOTES AND QUESTIONS
-we need a datastructure to show connectivity
-how are we going to go from vertices to triangles? hmmm...

BASIC INTEGRATOR WORKFLOW AND REQUIREMENTS
-so we need a buffer of constraints
	-we can use vec3s for these: -> can we just adapt the acceleration buffer? probably.
		-x = point idx 1
		-y = point idx 2
		-z = rest length
	-we'll need a force buffer if we're parallelizing over constraints -> should just be another vec3
		-may need to use atomics to do force accumulation
	-for now we'll hardcode that indices N - 2 and N - 1 are fixed constraints

	1) kernel -> compute external forces -> easy peasy? for now
	2) kernel -> for each constraint, compute internal force contribution
	3) kernel -> integrate explicit euler -> kernel
	4) kernel -> damp velocity
	5) draw

TODO:
-add host buffers. modify position generation to produce a grid [done, I think?]
-generate vec3 constraints [done, I think?]
-add new compute shaders and setup [done, I think?]
-add compute step invocations [done, I think?]