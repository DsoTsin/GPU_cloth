12/09/2015
-confirmed: compute shader memory can be incoherent: https://www.opengl.org/wiki/Memory_Model
-basically just need to do glMemoryBarrier(GL_SHADER_STORAGE_BARRIER_BIT) after each PBD stage
-guess the lab computers are slower on CPU than on GPU?

TODO
-clean the stuff used to find the barrier problem [done]
-fix static collision [done!]
-we possibly need more edges to get a nice sim. like, Xs for each quad. [done]
-get nonstatic collision
-add animation system -> biggie
-make meshes able to draw in different colors... big problem right now [done]

12/08/2015
WEIRD DRIPPY CLOTH WITH NO CONSTRAINTS ISSUE
-tried it in the lab, no problems there?
-Kai suspects a memory issue of some kind -> hmmm will keep looking
-more observations:
	-more printing between shader stages == more stable simulation
	-are the stages dispatching too close together? -> going from one stage to another too soon -> update positions before velocities are done
		-how can I make them wait?
		-would also make sense of the part where not updating velocity in stage 7 improves stability but only up to a point.
	-tomorrow: try condensing shader stages, like squishing external forces + prediction into a single stage. -> means giving up on good damping though
		-could indicate the dispatch problem

TODO
-strip the prog planet stuff, don't need that anymore [done]
-add stage after PBD that looks at collision constraints, updates velocities, then clears collision constraints
-make the "bounce" in the collision resolution shader a uniform

12/07/2015

TODO:
-make all shaders aware of data amount (aka idx at which to do nothing and return) [done]
-change constraint format: [done]
	-neg length indicates a pin
	-pin still has source and dest in the usual way
	-item 4 in the vec4 is the constraint's K. so K will no longer be a uniform
	-rename in shader to be more clear
	-realization: we can simplify the cloth projecting shader a LOT b/c the external constraints case is invoked completely separately [done]
-add an inverse mass buffer [done]
	-just use w in the pos buffer to store weights
	-and then use w in the predpos1 and predpos2 buffers to store inverse mass
-add an "inverse mass update" shader that scans the pin constraints and updates the inverse masses [done]

-add a compute shader to do obj mesh animation using a matrix and a weight buffer
-this way we can animate a mesh moving and pin things to it at least
-add a shader for obj collision detect and collision constraint gen
	-how does an obj collision constraint work? is it just another buffer of pin constraints? gets refreshed every frame? -> in this case it's a REALLY good idea to modify weights on the GPU
	-but read the section in the paper. there should be... time
	-how to do it with an animated mesh? just use the mesh's updated position? worth trying
		-in that case, need to handle both static and nonstatic in Muller. oh boy.
	-ok: so collision constraints are as follows:
		-direction to move p in (usually, surface normal at collision)
		-magnitude to move p by
	-collision constraint you're doing is very different from muller
	-the C in muller just replaces the C in the inner constraint solver for muller's
	-can still use vec4 buffers: store normal (really) and use parametric to get q based on p

12/06/2015
-keep debugging
	-right now the cloth is "too stretchy"
	-look at how attachment constraints SHOULD be handled?
	-in 563 it was basically just moved back into place
	-Muller suggests making the pinned position's inverse mass 0 so nothing can move it.
		-so in a constraint, this will give the "other" item in the constraint a greater dp
		-options:
			-1 add a weight buffer, handle updating it w/constraints on the CPU
			-2 add an "update weights" shader stage that runs per constraint and updates weights automatically
			-no matter what we do, pin constraints on GPU must be updated by buffering it
			-updating weights on CPU basically doubles number of things that must be sent to the GPU
			-doing it on the GPU could lead to some "collisions" but we don't really care
			-and it doesn't have to be run on every frame, unless we weight for friction constraints
			-so let's do it in an additional shader stage. faster too if # pins is huge
			-may need to change how pin constraints are done in general:
				-pins may be fixed in space (init pos pins)
				-but pins may also be attached to a mesh in the future
				-let's use rest length as an indicator of "pin-ness" instead of index
					-negative rest length == "this is a pin"
					-and then the indices are just indices as always
					-we'll pass in a POS buffer into the shader that can be used as a source for pinning
						-this can either be an animated mesh's vertices or the cloth's own positions

-get at least the framework for animated mesh collision in debuggable condition
	-look at 277 skinning. implement something basic like that on compute shader
	-just import a mesh with a single skeleton joint for now
	-bvh can come later?

	-mesh collision detect:
		-so most basic idea is to check pPos vs prevPos as a line seg, check with every triangle
		-but do we also need to assess per-vertex if the vertex is "inside" the mesh?
			-would certainly be slow
			-would also need to determine nearest mesh vertex, push in that direction
			-maybe we can do a pair of collision detection shaders
			-what it could do:
				-raycast towards the predicted position
				-if ISX coount is even, check for collision, generate constraint
				-if ISX count is odd...
					-find the nearest mesh vertex -> acceleratable
					-push out?
					-or push out along predicted position vector?

		-other options: compute mesh AABBs? if the vertex is within one, push out? -> which dir?
		-we can't compute this AABB on the GPU either, no float atomics

-add support for raycasting pins? -> not yet

12/05/2015
-add more cam/playback controls [done]
-make constants in compute shaders into uniforms [done]
-DEBUG THE SIMULATION
	-the 563 sim counts triangle edges as well. would this help with stability? -> removing them in 563 doesn't change that sim's stability
	-increasing iterations per timestep improves stability to a point, but things still go crazy
	-decreasing timestep doesn't help
	-behavior changes significantly if I reverse the order in which the constraints are projected
	-there's... a phantom pin?
	-ok part of the stability problem: a whole internal constraint buffer was getting overwritten b/c forgot to bind another buffer later before uploading a bunch of bogus
-add naive mesh collision detect!

12/04/2015

TODO
-clean pipeline. eyeball debug.
	-can we merge damp velocities and predict positions? -> except damp velocities could end up quite complex. so not yet.
	-RENAME THINGS RIGHT
	-make constants uniforms!

-debug simulation stability
	-why is there still instability with no constraint projection? numerical error?
	-hmmm... was doing v = v + f instead of v = v + f * dt. seems a little better. [done]

-do proper damping
	-may need to look at and implement scan algorithm
	-assess the CPU version w/out damping. does that solve our stability problem?
	-doesn't look like damping is the source of instability

-add obj checking and constraint generation
-ask Kai about suggestions on animation import formats
	-bvh + obj + skin weights? autoskin in the app if can't export weights?
		-also, writing a bvh player won't be easy
	-borrow from the current 462 bvh player?
	-something like obj sequence or baked fbx isn't good, too slow to load each frame

12/01/2015
-so the vec4 thing is part of std430: buffers are always treated as vec4s, although you can interpret as vec3s in the shader -> thanks Kai!
-we can get things back from the GPU! all about the bufMask. see the writeup -> thanks Kai!
-

11/30/2015
TODO
-fix upload constraints [needs testing]
-modify ppd constraint shader to do pins [needs testing]
-link up the shaders [needs testing]
-test test test
-if there's time: mesh collision step?

11/29/2015
-so there's something wrong with drawing imported meshes right now
-I STRONGLY suspect it's the geometry shader

TODO
-get meshes drawing [done, I think]
-strip out old code for generating meshes and constraints -> correction: add a "simualtion" class [done]
-get meshes importing drawing -> correciton: add a "simulation" class [done]
-pbd shaders [done, needs testing]
	-external forces
	-damp velocities (something basic for now)
	-predict positions
	-project constraints (however many times)

	ScalarType k_prime = 1 - std::pow(1-*(m_p_pbd_stiffness), 1.0/ns); // just like in Muller eh?

	EigenVector3 p1 = x.block_vector(m_p1);
	EigenVector3 p2 = x.block_vector(m_p2);

	ScalarType dist = (p1 - p2).norm();

	ScalarType w = 0.5f; // is this okay? it's w1 / (w1 + w2), but w1 == w2 right?

	EigenVector3 dp1 = -w * (dist - m_rest_length) * (p1 - p2) / dist;
	EigenVector3 dp2 = -1.0f * dp1;

	x.block_vector(m_p1) += k_prime * dp1;
	x.block_vector(m_p2) += k_prime * dp2;

	-update positions and velocities
-pbd pipeline

11/28/2015
-post Thanksgiving!
-took a look at PBD paper, b/c Harmony suggested implementing PBD instead
-also took a look at the PBD hw
-we may just reject bending constraints for now. add them in if necessary

PBD
-so PBD does an explicit euler step with external forces and then corrects resulting positions and velocities using constraints
-in this case, the constraints are cloth-y -> mass spring system
-so it's "unconditionally stable"
-presumably each step in the PBD will need to be its own shader
-when we get to collision detect, we'll also need to add shader collision check -> mmmm
	-perhaps we'll need another buffer of "collisions" per point
	-b/c if there's n points there's at most n collision constraints, right?
	-how to deal with edges... an ongoing problem

TODO
-make "cloth" and "noncloth" classes [done]
	-need to have GL pointers to buffers
-get obj loading and drawing working
-add additional kernels

11/23-24/2015
TODO:
-figure out what's causing drawing in weird space. ask Kai? [done, vec4 vs vec3]
-move mesh into its own class. load an obj instead of doing your jank thing
	-needs to hold its own pointers to buffers and stuff
	-can we put the GL calls in there? or would it make more sense for this to be a struct?
-figure out how to draw polys (read about geometry shaders)
-read up on compute shader memory
-add a plane and some basic shading

-okay. the lack of atomics for floats is a problem. options:
	-look into manually locking
	-look into adding an int buffer to do something
	-float packing (bad idea?)
	-pack the constraints so there's no interference. -> this is Kai sanctioned
		-there's at most 8 constraints influencing each point, we need 8 buffers this way
		-in theory if the mesh is big enough we don't even have to worry about GPU saturation problems
		-and locks/atomics basically serialize too, right?

11/23/2015
BASIC INTEGRATOR NOTES
-we'll do a basic euler for now
-steps:
	-compute forces
	-compute external forces
	-resolve constraints
	-damp velocity
	-render
-we'll also try ping-ponging
-but how to compute forces? -> I... guess we didn't have to do this -> actually, we did
-so go read the 563 HW writeup

IMPLEMENTATION NOTES AND QUESTIONS
-we need a datastructure to show connectivity
-how are we going to go from vertices to triangles? hmmm...

BASIC INTEGRATOR WORKFLOW AND REQUIREMENTS
-so we need a buffer of constraints
	-we can use vec3s for these: -> can we just adapt the acceleration buffer? probably.
		-x = point idx 1
		-y = point idx 2
		-z = rest length
	-we'll need a force buffer if we're parallelizing over constraints -> should just be another vec3
		-may need to use atomics to do force accumulation
	-for now we'll hardcode that indices N - 2 and N - 1 are fixed constraints

	1) kernel -> compute external forces -> easy peasy? for now
	2) kernel -> for each constraint, compute internal force contribution
	3) kernel -> integrate explicit euler -> kernel
	4) kernel -> damp velocity
	5) draw

TODO:
-add host buffers. modify position generation to produce a grid [done, I think?]
-generate vec3 constraints [done, I think?]
-add new compute shaders and setup [done, I think?]
-add compute step invocations [done, I think?]